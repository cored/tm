#!/usr/bin/env ruby
require 'gli'
require 'taskmapper'
begin # XXX: Remove this begin/rescue before distributing your app
  require 'tm'
rescue LoadError
  STDERR.puts "In development, you need to use `bundle exec bin/tm` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/tm now"
  exit 64
end

include GLI::App

program_desc 'Command line interface for Taskmapper'
config_file '~/.taskmapper.yml'

version Tm::VERSION

desc 'Provider name'
arg_name "kanbanpad, github, etc"
flag [:p, :provider]

desc 'Authentication for provider' 
arg_name "'token:password, username:user'"
flag [:a, :authentication]

desc 'Project handling' 
arg_name 'Command for managing projects' 
command :project do |c|
  c.desc 'List all projects'
  c.flag [:l, :list]

  c.action do |global_options, options, args| 
    provider = global_options[:provider].to_sym
    authentication = global_options[:authentication].split(/,/).inject({}) do |res, kv|
      arg, val = kv.split(/:/)
      res[arg] = val
      res
    end
    require "taskmapper-#{provider}"
    tm = TaskMapper.new(provider, authentication)
    if options[:list] == 'all'
      projects = tm.projects
      projects.each do |project|
        printf("%s, %s, %s, %s \n", project.id, project.name, project.created_at, project.updated_at)
      end
    end
  end
end

command :ticket do |c|
  c.desc 'List all tickets for a given project'
  c.flag [:p, :project]

  c.action do |global_options, options, args| 
    provider = global_options[:provider].to_sym
    authentication = global_options[:authentication].split(/,/).inject({}) do |res, kv|
      arg, val = kv.split(/:/)
      res[arg] = val
      res
    end
    require "taskmapper-#{provider}"
    tm = TaskMapper.new(provider, authentication)
  end
end

desc 'Describe list here'
arg_name 'Describe arguments to list here'
command :list do |c|
  c.action do |global_options,options,args|
    puts "list command ran"
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
